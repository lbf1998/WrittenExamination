package penTest.qiAnXin;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

public class Solution {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 计算dag 路径上起始到目的节点的路径数目
     * @param nodes int整型二维数组 第 i 个数组中的单元都表示有向图中 i 号节点所能到达的下一些结点（译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a ），若为空，就是没有下一个节点了。
     * @return int整型
     */
    private static int res = 0;
    List<List<Integer>> ans = new ArrayList<List<Integer>>();
    Deque<Integer> stack = new ArrayDeque<Integer>();

    public int DagPathNum (int[][] nodes) {
        // write code here
        stack.offerLast(0);
        DFS(nodes, 0, nodes.length - 1);
        return res;
    }
    public void DFS(int[][] nodes, int x,int n){
        if (x==n){
            ans.add(new ArrayList<Integer>(stack));
            res++;
            return;
        }
        for (int y : nodes[x]){
            stack.offerLast(y);
            DFS(nodes, y, n);
            stack.pollLast();
        }
    }
}
