package penTest.hinsesn;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

public class Main1 {
    public static void main(String[] args) {
        int[][] nums= {{1,2,3},{4,5,6}};
        int a = 2147483647;
        System.out.println(63 & 32);
//        System.out.println(getMatrix(nums));
    }

    private static ArrayList<ArrayList<Integer>> getMatrix(int[][] matrix) {
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        for (int i = 0; i < matrix.length; i++) {
            ArrayList<Integer> list = new ArrayList<>();
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j]%2==0){
                    list.add(matrix[i][j]);
                }else{
                    list.add(matrix[i][j] * 2);
                }
            }
            res.add(list);

        }
        return res;
    }
}

class StringHelper{
    /***
     * 实现一个StringHelper类，要求实现以下功能，
     * String的拼接
     * Concat() ，
     * 截取 SubString() ，
     * 去重 Distinct()，
     * 包含 Contains()
     */
    String str;

    /**
     *
     * @param str1:拼接字符串的第一个字符串
     * @param str2：拼接字符串的第二个字符串
     * @return 返回拼接后的字符串
     */
    public String Concat(String str1, String str2) {
        int len1 = str1.length();
        int len2 = str2.length();
        if (len1 == 0 || len2 == 0){
            return len1 == 0 ?  str2 : str1;
        }
        char[] buf = new char[len1+len2];
        for (int i = 0; i < len1+len2; i++) {
            if (i < len1){
                buf[i] = str1.charAt(i);
            }else {
                buf[i] = str2.charAt(i);
            }
        }
        return new String(buf);
    }

    /***
     *
     * @param str:分割的字符串
     * @param begin：开始位置
     * @param end：结束位置
     * @return 返回分割后的字符数
     */
    public String SubString(String str, int begin, int end){
        int len = end - begin;
        if (len <= 0 || len >= str.length()){
            return str;
        }
        char[] charArr = str.toCharArray();
        char[] chars = new char[len];
        boolean flag = false;
        int index = 0;
        for (int i = 0; i < str.length(); i++) {
            if (i==begin || flag){
                chars[index] = charArr[i];
                index++;
                flag = true;
            }
            if (i == end){
                break;
            }
        }
        return new String(chars);
    }
    public String Distinct(String str){
        if (str == null){
            return str;
        }
        char[] chars = new char[str.length()];
        char[] charArr = str.toCharArray();
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (str.indexOf(c) == str.lastIndexOf(c)){
                chars[i] = c;
            }else if (str.indexOf(c) == i){
                chars[i] = c;
            }
        }
        return new String(chars);
    }

    /***
     *
     * @param str：源字符串
     * @param c：查找的字符
     * @return 返回是否存在
     */
    public boolean Contains(String str, char c){
        char[] result = new char[str.length()];
        System.arraycopy(str.toCharArray(), 0, result, 0, str.length());
        for (int i = 0; i < result.length; i++) {
            if (result[i] == c){
                return true;
            }
        }
        return false;
    }


}