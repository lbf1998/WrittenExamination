package penTest.byteDance;

import org.w3c.dom.ls.LSInput;

import java.util.*;

public class graph {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNextLine()){
            int n = Integer.parseInt(scanner.nextLine());
            List<List<Integer>> edge = new ArrayList<>();
            for (int i = 0; i < 9; i++) {
                edge.add(new ArrayList<>());
            }
            String si = scanner.nextLine();
            String[] s = si.split(" ");
            int[] req = new int[s.length];
            for (int i = 0; i < s.length; i++) {
                req[i] = Integer.parseInt(s[i]);
            }
            for (int i = 0; i < n - 1; i++) {
                String temp = scanner.nextLine();
                String[] ts = temp.split(" ");
                int index = Integer.parseInt(ts[0]);
                for (int j = 0; j < ts.length; j++) {
                    edge.get(index).add(Integer.valueOf(ts[j]));
                }
            }
            getProcess(req, n, edge);
        }

    }

    private static void getProcess(int[] req, int n, List<List<Integer>> edge) {
        for (int i : req){
            int[] visit = new int[10];
            if (getDfs(i, edge, visit)){
                System.out.println(1+" ");
            }else{
                System.out.println(0+" ");
            }
        }
        System.out.println();

    }

    private static boolean getDfs(int i, List<List<Integer>> edge, int[] visit) {

        visit[i] = 1;
        List<Integer> nodes = edge.get(i);
        for (int node : nodes){
            if (visit[node] == 0){
                if (!getDfs(node, edge, visit)){
                    return false;
                }
            }else if (visit[node] == 1){
                return false;
            }
        }
        visit[i] = 2;
        return true;
    }
}
