package penTest.JD;

import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class Main2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int sum = 0;
        List<Integer> list = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            list.add(scanner.nextInt());
            sum += list.get(i);
        }
        DFS(list, 0, sum);
        System.out.println(min_step);
    }
    static int min_step = Integer.MAX_VALUE;
    private static void DFS(List<Integer> list, int index, int sum) {
        if (list.size() == sum){
            min_step = Math.min(min_step, index);
            return;
        }
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) == 1){
                continue;
            }
            int jump = list.get(i);
            // x  x-1
            List<Integer> list1 = new LinkedList<>(list);
            list1.remove(i);
            list1.add(1);
            list1.add(jump - 1);
            DFS(list1, index + 1, sum);
            // a * b
            int[] R = getNumber(jump);
            if (R[0] != -1) {
                List<Integer> list2 = new LinkedList<>(list);
                list2.remove(i);
                list2.add(R[0]);
                list2.add(R[1]);
                DFS(list2, index + 1, sum - jump + R[0] + R[1]);
            }
        }
    }

    private static int[] getNumber(int jump) {

        int[] R = new int[]{-1, -1};
        for (int i = 2; i < Math.sqrt(jump); i++) {
            if (jump % i ==0){
                R[0] = i;
                R[1] = jump / i;
                break;
            }
        }
        return R;
    }
}
