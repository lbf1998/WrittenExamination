package penTest.meituan;

import java.util.*;

public class Main3 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
//        int n = scanner.nextInt();
        int n = 6;
//        int[] nums = new int[n-1];
        int[] nums = {1, 2, 2, 1, 4};
//        for (int i = 0; i < n; i++) {
//            nums[i] = scanner.nextInt();
//        }
//        String str = scanner.next();
        String str = "ABCCAD";
        Tree tree = getTree(nums, str);
        DFS(tree);
        list.sort(new Comparator<Tree>() {
            @Override
            public int compare(Tree o1, Tree o2) {
                return o1.index - o2.index;
            }
        });
        for (Tree root : list) {
            System.out.print(root.letterType + " ");
        }

    }

    private static Set<Character> DFS(Tree root) {
        if (root == null) return new HashSet<>();
        Set<Character> set1 = DFS(root.left);
        Set<Character> set2 =DFS(root.right);
        set1.addAll(set2);
        set1.add(root.var);
        root.letterType = set1.size();
        list.add(root);
        return set1;
    }

    static List<Tree> list = new ArrayList<>();

    private static Tree getTree(int[] nums, String str) {

        Map<Integer, Tree> map = new HashMap<>();
        Tree root = new Tree(1, str.charAt(0));
        map.put(1, root);
        for (int i = 0; i < nums.length; i++) {
            Tree tree = map.get(nums[i]);
            Tree jump = new Tree(i + 2, str.charAt(i + 1));
            map.put(i + 2, jump);
            if (tree.left == null) {
                tree.left = jump;
                continue;
            }
            tree.right = jump;
        }
        return root;
    }
}

class Tree {
    int index;
    int letterType;
    char var;
    Tree left;
    Tree right;

    public Tree(int index, char var) {
        this.index = index;
        this.var = var;
        this.letterType = 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        Tree tree = (Tree) obj;
        return index == tree.index &&
                var == tree.var &&
                letterType == tree.letterType &&
                Objects.equals(left, tree.left) &&
                Objects.equals(right, tree.right);
    }
}
