package penTest.keyFly;

import java.util.Scanner;

public class Main2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int m = scanner.nextInt();
        int n = scanner.nextInt();
        int[][] jpg = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                jpg[i][j] = scanner.nextInt();
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int temp = scanner.nextInt();
                if (temp == jpg[i][j]){
                    jpg[i][j] = 1;
                }else {
                    jpg[i][j] = 0;
                }
            }
        }
        System.out.println(getMaxArea(jpg));

    }

    private static int getMaxArea(int[][] graph) {
        int ans = 0;
        for (int i = 0; i != graph.length; i++) {
            for (int j = 0; j != graph[0].length; j++) {
                ans = Math.max(ans, dfs(graph, i, j));
            }
        }
        return ans;
    }

    private static int dfs(int[][] graph, int now_i, int now_j) {

        if (now_i < 0 || now_j < 0 || now_i == graph.length || now_j == graph[0].length || graph[now_i][now_j] != 1){
            return 0;
        }
        graph[now_i][now_j] = 0;
        int[] di = {0,0,1,-1};
        int[] dj = {1,-1,0,0};
        int ans = 1;
        for (int index = 0; index != 4; index++) {
            int next_i = now_i + di[index], next_j = now_j + dj[index];
            ans += dfs(graph, next_i, next_j);
        }
        return ans;
    }
}
