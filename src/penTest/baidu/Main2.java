package penTest.baidu;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] moders = new int[n];
        for (int i = 0; i < n; i++) {
            moders[i] = scanner.nextInt();
        }

        killModer(moders);
    }
    static int res = Integer.MAX_VALUE;
    static int[] actions = {1, 5};
    private static void killModer(int[] moders) {
        for (int i = 0; i < moders.length; i++) {
            dfs(moders, i, actions[0], 0);
            dfs(moders, i, actions[1], 0);
        }
    }

    private static void dfs(int[] moders, int index, int act, int tem) {
        if (isKiled(moders)){
            res = Math.min(res, tem);
            return;
        }
        tem += act;
        moders = exeAct(moders, index, act);
        for (int i = 0; i < moders.length; i++) {
            List<Integer> action = checkBool(moders, i, actions);
            if (action.size() == 0)
                continue;
            for (int a : action) {
                dfs(moders, i, a, tem);
            }
        }
    }

    private static List<Integer> checkBool(int[] moders, int index, int[] actions) {
        List<Integer> alist = new ArrayList<>();
        if (index > moders.length-1){
            if (moders[index]!=0){
                alist.add(actions[0]);
            }
            return alist;
        }
        if (moders[index]!=0){
            alist.add(actions[0]);
        }
        if (moders[index+1]!=0 || moders[index+2] !=0){
            alist.add(actions[1]);
        }
        return alist;
    }

    private static int[] exeAct(int[] moders, int index, int act) {
        if (act == 1){
            moders[index] = moders[index] == 0 ? 0 : moders[index]-1;
        }else if (act == 3){
            moders[index] -= 1; //减一
            if (index+1 < moders.length){
                moders[index+1] -= 2;
            }
            if (index+2 < moders.length){
                moders[index+2] -= 3;
            }
        }
        return moders;
    }

    private static boolean isKiled(int[] moders){
        for (int moder : moders) {
            if (moder != 0) {
                return false;
            }
        }
        return true;
    }
}
