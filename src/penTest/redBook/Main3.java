package penTest.redBook;

import java.util.*;

public class Main3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int city = scanner.nextInt();
        int load = scanner.nextInt();
        int len = scanner.nextInt();
        int[][] nums = new int[3][load];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < load; j++) {
                nums[i][j] = scanner.nextInt();
            }
        }
        Map<Integer, List<Integer>> map = get(nums);
        System.out.println(getMin(map, len, city));

    }
    static Boolean flag = false;
    private static int getMin(Map<Integer, List<Integer>> map, int len, int city) {

        List<Integer> list = map.get(1);

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < list.size(); i++) {
            int[] visit = new int[city+1];
            visit[i] = 1;
            flag = false;
            DFS(visit, list.get(i), city, 1, len,  mon_map.get(1+"_"+list.get(i)), map);
            if (flag){
                min = Math.min(min, mon_map.get(1+"_"+list.get(i)));
            }

        }
        return min;
    }

    private static void DFS(int[] visit, Integer now_city, int city, int old_len, int len, int x, Map<Integer, List<Integer>> map) {
        if (old_len > len || flag){
            return;
        }
        if (city == now_city){
            flag = true;
            return;
        }
        visit[now_city] = 1;
        List<Integer> next_city = map.get(now_city);
        for (int i = 0; i < next_city.size(); i++) {
            if (visit[next_city.get(i)] == 1){
                continue;
            }
            int point1 = now_city;
            int point2 = next_city.get(i);
            int money=0;
            if (point1<point2){
                money = mon_map.get(point1+"_"+point2);
            }else {
                money = mon_map.get(point2+"_"+point1);
            }
            if (money > x){
                continue;
            }
            DFS(visit, next_city.get(i), city, old_len+1, len, x, map);
        }
        visit[now_city] = 0;
    }

    // 创建权值网
    static Map<String, Integer> mon_map = new HashMap<>();
    // 创建路网
    private static Map<Integer, List<Integer>> get(int[][] nums) {
        Map<Integer, List<Integer>> load_map = new HashMap<>();
        for (int i = 0; i < nums[0].length; i++) {

            int point1 = nums[0][i];
            int point2 = nums[1][i];
            if (point1 > point2){
                mon_map.put(point2+"_"+point1, nums[2][i]);
            }else {
                mon_map.put(point1+"_"+point2, nums[2][i]);
            }
            load_map.putIfAbsent(point1, new ArrayList<>());
            load_map.get(point1).add(point2);
            load_map.putIfAbsent(point2, new ArrayList<>());
            load_map.get(point2).add(point1);
        }
        return load_map;
    }
}
